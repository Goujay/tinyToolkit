#
# 项目名
#
SET(PROGRAM_NAME tinyToolkit)


#
# 库文件的生成目录
#
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)


#
# 获取当前目录下源文件
#
TRAVERSE_CURRENT_SOURCE_FILE(SOURCE_FILES)


#
# 链接源文件, 生成库文件
#
ADD_LIBRARY(${PROGRAM_NAME} SHARED ${SOURCE_FILES})


#
# 链接库文件
#
IF(WIN32)

	#
	# fmt支持
	#
	TRAVERSE_LIBRARY_FOR_PROGRAM_NAME(${PROJECT_SOURCE_DIR}/project/library/fmt/windows/fmt.lib)

ELSEIF(APPLE)

	#
	# fmt支持
	#
	TRAVERSE_LIBRARY_FOR_PROGRAM_NAME(${PROJECT_SOURCE_DIR}/project/library/fmt/apple/libfmt.a)

ELSE()

	#
	# fmt支持
	#
	TRAVERSE_LIBRARY_FOR_PROGRAM_NAME(${PROJECT_SOURCE_DIR}/project/library/fmt/linux/libfmt.a)

ENDIF()


#
# 安装库文件
#
INSTALL(TARGETS tinyToolkit
		LIBRARY DESTINATION ${LIBRARY_INSTALL_PREFIX}
		ARCHIVE DESTINATION ${LIBRARY_INSTALL_PREFIX})


#
# 安装头文件
#
INSTALL(PROGRAMS tinyToolkit.h DESTINATION ${INCLUDE_INSTALL_PREFIX})


#
# 遍历安装头文件
#
TRAVERSE_INSTALL_INCLUDE(id			${INCLUDE_INSTALL_PREFIX}/id)
TRAVERSE_INSTALL_INCLUDE(3rd		${INCLUDE_INSTALL_PREFIX}/3rd)
TRAVERSE_INSTALL_INCLUDE(log		${INCLUDE_INSTALL_PREFIX}/log)
TRAVERSE_INSTALL_INCLUDE(net		${INCLUDE_INSTALL_PREFIX}/net)
TRAVERSE_INSTALL_INCLUDE(test		${INCLUDE_INSTALL_PREFIX}/test)
TRAVERSE_INSTALL_INCLUDE(pool		${INCLUDE_INSTALL_PREFIX}/pool)
TRAVERSE_INSTALL_INCLUDE(timer		${INCLUDE_INSTALL_PREFIX}/timer)
TRAVERSE_INSTALL_INCLUDE(debug		${INCLUDE_INSTALL_PREFIX}/debug)
TRAVERSE_INSTALL_INCLUDE(logic		${INCLUDE_INSTALL_PREFIX}/logic)
TRAVERSE_INSTALL_INCLUDE(common		${INCLUDE_INSTALL_PREFIX}/common)
TRAVERSE_INSTALL_INCLUDE(crypto		${INCLUDE_INSTALL_PREFIX}/crypto)
TRAVERSE_INSTALL_INCLUDE(system		${INCLUDE_INSTALL_PREFIX}/system)
TRAVERSE_INSTALL_INCLUDE(utilities	${INCLUDE_INSTALL_PREFIX}/utilities)
